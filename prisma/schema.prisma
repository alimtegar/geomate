// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AnswerChoice {
  id         String   @id @default(cuid())
  answer     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

enum QuestionType {
  MULTIPLE_CHOICES
  ESSAY
}

model Question {
  id                  String               @id @default(cuid())
  shapeCodename       String
  image               String?
  question            String
  correctAnswer       String
  type                QuestionType
  answerChoices       AnswerChoice[]
  evaluationQuestions EvaluationQuestion[]
}

model EvaluationQuestion {
  id         String   @id @default(cuid())
  answer     String?
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Evaluation {
  id        String   @id @default(cuid())
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Observation {
  id            String   @id @default(cuid())
  shapeCodename String
  image         String?
  nVertices     Int?
  nEdges        Int?
  nFaces        Int?
  r             Float?
  t             Float?
  s             Float?
  la            Float?
  lst           Float?
  ka            Float?
  v             Float?
  lp            Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  observations  Observation[]
  evaluations   Evaluation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
